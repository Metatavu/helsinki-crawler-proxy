name: Publish to staging

on:
  push:
    branches:
      - develop

env:
  REGISTRY: ghcr.io
  GITHUB_REPOSITORY: ${{ github.repository }}

jobs:
  build-and-push-image:
    environment: develop
    runs-on: ubuntu-latest    
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve docker image name
        id: image_name
        run: |
          echo "IMAGE_NAME=${GITHUB_REPOSITORY@L}" >> $GITHUB_OUTPUT
          
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.IMAGE_NAME }}

      - name: Build and push Docker image
        id: dockerpush
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  helm-deploy:
    environment: develop
    needs: build-and-push-image
    runs-on: helsinki-crawler-proxy-staging-arc-runners
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: develop
      - name: Install ARC dependencies
        run: |
          sudo apt update && sudo apt install -y zip
      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
              ${{ secrets.VAULT_PATH }} ENTRYPOINT_HTTP | ENTRYPOINT_HTTP ;
              ${{ secrets.VAULT_PATH }} ENTRYPOINT_HTTPS | ENTRYPOINT_HTTPS ;
              ${{ secrets.VAULT_PATH }} HTTP_PORT | HTTP_PORT ;
              ${{ secrets.VAULT_PATH }} HTTPS_PORT | HTTPS_PORT ;
      - name: Install Helm
        uses: azure/setup-helm@v3
      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
      - name: Install Chart 
        run: |
            echo ${{ needs.build-and-push-image.outputs.image-digest }}
            echo "replicaCount: 1" >> new-values.yaml &&
            echo "image:" >> new-values.yaml &&
            echo "  sha256: ${{ needs.build-and-push-image.outputs.image-digest }}" >> new-values.yaml &&
            echo "service: " >> new-values.yaml &&
            echo "  http: " >> new-values.yaml &&
            echo "    entrypoint: ${{ env.ENTRYPOINT_HTTP }}" >> new-values.yaml &&
            echo "    port: ${{ env.HTTP_PORT }}" >> new-values.yaml &&
            echo "  https: " >> new-values.yaml &&
            echo "    entrypoint: ${{ env.ENTRYPOINT_HTTPS }}" >> new-values.yaml &&
            echo "    port: ${{ env.HTTPS_PORT }}" >> new-values.yaml &&
            echo "resources: " >> new-values.yaml &&
            echo "  limits: " >> new-values.yaml &&
            echo "    cpu: 256m" >> new-values.yaml &&
            echo "    memory: 1Gi" >> new-values.yaml &&
            echo "  requests: " >> new-values.yaml &&
            echo "    cpu: 50m" >> new-values.yaml &&
            echo "    memory: 256Mi" >> new-values.yaml &&
            echo "secretStore:" >> new-values.yaml &&
            echo "  server: https://hcv.metatavu.io" >> new-values.yaml &&
            echo "  path: helsinki/crawler-proxy/staging/kv" >> new-values.yaml &&
            echo "  tokenRef: staging-hcv-token" >> new-values.yaml &&
            helm upgrade staging ./helm  -f new-values.yaml -n staging
